{
  "name": "Material Management Workflow - FIXED",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "const text = ($json.messageText || '').toLowerCase().trim();\nlet action = 'unknown';\n\n// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π\nif (text.startsWith('/–∑–∞–≥—Ä—É–∑–∫–∞') || text.startsWith('/load')) {\n  action = 'bunker_load';\n} else if (text.startsWith('/–æ—Å—Ç–∞—Ç–∫–∏') || text.startsWith('/stock')) {\n  action = 'stock_check';\n} else if (text === 'üì¶ –æ—Å—Ç–∞—Ç–∫–∏' || text === '–æ—Å—Ç–∞—Ç–∫–∏') {\n  action = 'stock_check';\n} else if (text.includes('–∑–∞–≥—Ä—É–∑–∫–∞') || text.includes('–∑–∞–≥—Ä—É–∑–∏—Ç—å')) {\n  action = 'bunker_load';\n}\n\nconsole.log(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: ${action} –¥–ª—è —Ç–µ–∫—Å—Ç–∞: ${text}`);\nreturn { ...$input.item.json, action: action };"
      },
      "name": "Determine Material Action - FIXED",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.action}}",
              "value2": "bunker_load",
              "operation": "equals"
            },
            {
              "value1": "={{$json.action}}",
              "value2": "stock_check",
              "operation": "equals"
            }
          ]
        }
      },
      "name": "Route Material Action",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "const messageText = $json.messageText || '';\n\n// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏\nconst cleanText = messageText.trim();\nconst parts = cleanText.split(/\\s+/); // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ª—é–±–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–±–µ–ª–æ–≤\n\nif (parts.length < 4) {\n  return { \n    error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\\n\\nüìù *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:*\\n`/–∑–∞–≥—Ä—É–∑–∫–∞ [–ë–£–ù–ö–ï–†] [–ú–ê–¢–ï–†–ò–ê–õ] [–ö–û–õ–ò–ß–ï–°–¢–í–û]`\\n\\nüí° *–ü—Ä–∏–º–µ—Ä:*\\n`/–∑–∞–≥—Ä—É–∑–∫–∞ –ë–¶1 —Ü–µ–º–µ–Ω—Ç 50`' \n  };\n}\n\nconst bunkerId = parts[1].toUpperCase().trim();\nconst materialName = parts[2].toLowerCase().trim();\nconst quantityStr = parts[3].trim();\n\n// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞\nconst quantity = parseFloat(quantityStr.replace(',', '.'));\n\nif (isNaN(quantity) || quantity <= 0) {\n  return { \n    error: `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: \"${quantityStr}\"\\n\\n‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º\\nüí° –ù–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ 25.5` \n  };\n}\n\nif (quantity > 1000) {\n  return { \n    error: `‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} —Ç–æ–Ω–Ω\\n\\nüîí –ú–∞–∫—Å–∏–º—É–º –∑–∞ –æ–¥–Ω—É –∑–∞–≥—Ä—É–∑–∫—É: 1000 —Ç–æ–Ω–Ω\\n–î–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π.` \n  };\n}\n\n// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ ID –±—É–Ω–∫–µ—Ä–∞\nif (!/^[–ê-–Ø]{1,3}\\d{1,2}$/i.test(bunkerId)) {\n  return { \n    error: `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –±—É–Ω–∫–µ—Ä–∞: \"${bunkerId}\"\\n\\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –ë–¶1, –ë–ò2, –ë–ü3\\nüí° –ë—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤` \n  };\n}\n\nconsole.log(`–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≥—Ä—É–∑–∫–∏: –±—É–Ω–∫–µ—Ä=${bunkerId}, –º–∞—Ç–µ—Ä–∏–∞–ª=${materialName}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ=${quantity}`);\n\nreturn {\n  bunker_id: bunkerId,\n  material_name: materialName,\n  quantity_loaded: quantity,\n  original_command: messageText\n};"
      },
      "name": "Parse Load Command - FIXED",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [900, 100]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.error}}",
              "value2": "",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Check Parse Error",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1120, 100]
    },
    {
      "parameters": {
        "chatId": "={{$input.item.json.chatId}}",
        "text": "={{$json.error}}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "name": "Send Parse Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1340, 40]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT material_id, material_name, current_stock, minimum_stock FROM materials WHERE LOWER(material_name) LIKE LOWER(CONCAT('%', ?, '%')) LIMIT 1;",
        "options": {
          "parameters": "=[{{$json.material_name}}]"
        }
      },
      "name": "Get Material ID - FIXED",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [1340, 160]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.length}}",
              "value2": 0,
              "operation": "equal"
            }
          ]
        }
      },
      "name": "Check Material Found",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1560, 160]
    },
    {
      "parameters": {
        "chatId": "={{$input.item.json.chatId}}",
        "text": "‚ùå *–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω*\\n\\n–ú–∞—Ç–µ—Ä–∏–∞–ª \"{{$('Parse Load Command - FIXED').item.json.material_name}}\" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\\n\\nüìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:*\\n‚Ä¢ —Ü–µ–º–µ–Ω—Ç\\n‚Ä¢ –∏–∑–≤–µ—Å—Ç—å\\n‚Ä¢ –ø–µ—Å–æ–∫\\n‚Ä¢ –∞–ª—é–º–∏–Ω–∏–π\\n\\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "name": "Send Material Not Found",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1780, 100]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT bunker_id, bunker_name, current_amount, max_capacity FROM bunkers WHERE bunker_id = ? AND status = 'active';",
        "options": {
          "parameters": "=[{{$('Parse Load Command - FIXED').item.json.bunker_id}}]"
        }
      },
      "name": "Check Bunker Exists",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [1780, 220]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.length}}",
              "value2": 0,
              "operation": "equal"
            }
          ]
        }
      },
      "name": "Check Bunker Found",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2000, 220]
    },
    {
      "parameters": {
        "chatId": "={{$input.item.json.chatId}}",
        "text": "‚ùå *–ë—É–Ω–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω*\\n\\n–ë—É–Ω–∫–µ—Ä \"{{$('Parse Load Command - FIXED').item.json.bunker_id}}\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.\\n\\nüìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:*\\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –±—É–Ω–∫–µ—Ä–∞\\n‚Ä¢ –°—Ç–∞—Ç—É—Å –±—É–Ω–∫–µ—Ä–∞ (–∞–∫—Ç–∏–≤–µ–Ω/–Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏)\\n\\nüí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –±—É–Ω–∫–µ—Ä–æ–≤.",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "name": "Send Bunker Not Found",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [2220, 160]
    },
    {
      "parameters": {
        "jsCode": "const bunkerData = $('Check Bunker Exists').item.json[0];\nconst loadData = $('Parse Load Command - FIXED').item.json;\n\nconst newAmount = bunkerData.current_amount + loadData.quantity_loaded;\n\nif (newAmount > bunkerData.max_capacity) {\n  const availableSpace = bunkerData.max_capacity - bunkerData.current_amount;\n  return {\n    error: true,\n    message: `‚ö†Ô∏è *–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –±—É–Ω–∫–µ—Ä–∞*\\n\\n–ë—É–Ω–∫–µ—Ä: ${bunkerData.bunker_id}\\n–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${bunkerData.current_amount} —Ç–æ–Ω–Ω\\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${bunkerData.max_capacity} —Ç–æ–Ω–Ω\\n–î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç–∞: ${availableSpace.toFixed(1)} —Ç–æ–Ω–Ω\\n\\n‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å: ${loadData.quantity_loaded} —Ç–æ–Ω–Ω\\n\\nüí° –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ ${availableSpace.toFixed(1)} —Ç–æ–Ω–Ω –∏–ª–∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ –±—É–Ω–∫–µ—Ä.`\n  };\n}\n\nreturn {\n  error: false,\n  bunker_data: bunkerData,\n  new_amount: newAmount\n};"
      },
      "name": "Check Capacity",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2220, 280]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.error}}",
              "value2": true,
              "operation": "equal"
            }
          ]
        }
      },
      "name": "Check Capacity Error",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2440, 280]
    },
    {
      "parameters": {
        "chatId": "={{$input.item.json.chatId}}",
        "text": "={{$json.message}}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "name": "Send Capacity Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [2660, 220]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO bunker_loads (bunker_id, material_id, loaded_by_id, quantity_loaded) SELECT ?, ?, e.employee_id, ? FROM employees e WHERE e.telegram_id = ? AND e.is_active = 1;",
        "options": {
          "parameters": "=[{{$('Parse Load Command - FIXED').item.json.bunker_id}}, {{$('Get Material ID - FIXED').item.json[0].material_id}}, {{$('Parse Load Command - FIXED').item.json.quantity_loaded}}, {{$input.item.json.userId}}]"
        }
      },
      "name": "Log Bunker Load - FIXED",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [2660, 340]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.affectedRows}}",
              "value2": 0,
              "operation": "equal"
            }
          ]
        }
      },
      "name": "Check Load Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2880, 340]
    },
    {
      "parameters": {
        "chatId": "={{$input.item.json.chatId}}",
        "text": "‚ùå *–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏*\\n\\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\\n‚Ä¢ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ\\n‚Ä¢ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω\\n\\nüí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "name": "Send Load Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [3100, 280]
    },
    {
      "parameters": {
        "chatId": "={{$input.item.json.chatId}}",
        "text": "‚úÖ *–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞*\\n\\nüì¶ **–î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:**\\n–ë—É–Ω–∫–µ—Ä: {{$('Parse Load Command - FIXED').item.json.bunker_id}}\\n–ú–∞—Ç–µ—Ä–∏–∞–ª: {{$('Get Material ID - FIXED').item.json[0].material_name}}\\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {{$('Parse Load Command - FIXED').item.json.quantity_loaded}} —Ç–æ–Ω–Ω\\n\\nüìä **–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ –±—É–Ω–∫–µ—Ä–µ:**\\n{{$('Check Capacity').item.json.new_amount}} —Ç–æ–Ω–Ω\\n\\nüíæ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "name": "Confirm Load - ENHANCED",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [3100, 400]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CALL GetCriticalStock()",
        "options": {}
      },
      "name": "Get Critical Stock",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [900, 500]
    },
    {
      "parameters": {
        "jsCode": "// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ö—Ä–∞–Ω–∏–º–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã\nconst results = items[0].json;\nlet criticalMaterials = [];\n\n// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞\nif (Array.isArray(results)) {\n  criticalMaterials = results;\n} else if (results && results[0] && Array.isArray(results[0])) {\n  criticalMaterials = results[0];\n} else if (results && Array.isArray(results.data)) {\n  criticalMaterials = results.data;\n}\n\nconsole.log('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏:', JSON.stringify(criticalMaterials));\n\nif (!criticalMaterials || criticalMaterials.length === 0) {\n  return { \n    message: '‚úÖ *–û—Å—Ç–∞—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –Ω–æ—Ä–º–µ*\\n\\nüéØ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∑–∞–ø–∞—Å.\\nüìä –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\\n\\nüí° –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.' \n  };\n}\n\nlet message = 'üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–°–¢–ê–¢–ö–ò –ú–ê–¢–ï–†–ò–ê–õ–û–í*\\n\\n';\nmessage += `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –Ω–∏–∑–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: **${criticalMaterials.length}**\\n\\n`;\n\nfor (const material of criticalMaterials) {\n  const stockPercentage = ((material.current_stock / material.minimum_stock) * 100).toFixed(1);\n  \n  message += `üî¥ **${material.material_name.toUpperCase()}**\\n`;\n  message += `   üì¶ –û—Å—Ç–∞—Ç–æ–∫: ${material.current_stock} ${material.unit_of_measure}\\n`;\n  message += `   üéØ –ú–∏–Ω–∏–º—É–º: ${material.minimum_stock} ${material.unit_of_measure}\\n`;\n  message += `   üìä –£—Ä–æ–≤–µ–Ω—å: ${stockPercentage}% –æ—Ç –º–∏–Ω–∏–º—É–º–∞\\n`;\n  message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\\n`;\n}\n\nmessage += '\\nüö® **–¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!**\\n';\nmessage += 'üí° –°–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ç–¥–µ–ª–æ–º —Å–Ω–∞–±–∂–µ–Ω–∏—è.';\n\nreturn { message };"
      },
      "name": "Format Stock Report - FIXED",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "chatId": "={{$input.item.json.chatId}}",
        "text": "={{$json.message}}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "name": "Send Stock Report",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1340, 500]
    }
  ],
  "connections": {
    "Start": {
      "main": [[{"node": "Determine Material Action - FIXED", "type": "main", "index": 0}]]
    },
    "Determine Material Action - FIXED": {
      "main": [[{"node": "Route Material Action", "type": "main", "index": 0}]]
    },
    "Route Material Action": {
      "main": [
        [{"node": "Parse Load Command - FIXED", "type": "main", "index": 0}],
        [{"node": "Get Critical Stock", "type": "main", "index": 0}]
      ]
    },
    "Parse Load Command - FIXED": {
      "main": [[{"node": "Check Parse Error", "type": "main", "index": 0}]]
    },
    "Check Parse Error": {
      "main": [
        [{"node": "Send Parse Error", "type": "main", "index": 0}],
        [{"node": "Get Material ID - FIXED", "type": "main", "index": 0}]
      ]
    },
    "Get Material ID - FIXED": {
      "main": [[{"node": "Check Material Found", "type": "main", "index": 0}]]
    },
    "Check Material Found": {
      "main": [
        [{"node": "Send Material Not Found", "type": "main", "index": 0}],
        [{"node": "Check Bunker Exists", "type": "main", "index": 0}]
      ]
    },
    "Check Bunker Exists": {
      "main": [[{"node": "Check Bunker Found", "type": "main", "index": 0}]]
    },
    "Check Bunker Found": {
      "main": [
        [{"node": "Send Bunker Not Found", "type": "main", "index": 0}],
        [{"node": "Check Capacity", "type": "main", "index": 0}]
      ]
    },
    "Check Capacity": {
      "main": [[{"node": "Check Capacity Error", "type": "main", "index": 0}]]
    },
    "Check Capacity Error": {
      "main": [
        [{"node": "Send Capacity Error", "type": "main", "index": 0}],
        [{"node": "Log Bunker Load - FIXED", "type": "main", "index": 0}]
      ]
    },
    "Log Bunker Load - FIXED": {
      "main": [[{"node": "Check Load Success", "type": "main", "index": 0}]]
    },
    "Check Load Success": {
      "main": [
        [{"node": "Send Load Error", "type": "main", "index": 0}],
        [{"node": "Confirm Load - ENHANCED", "type": "main", "index": 0}]
      ]
    },
    "Get Critical Stock": {
      "main": [[{"node": "Format Stock Report - FIXED", "type": "main", "index": 0}]]
    },
    "Format Stock Report - FIXED": {
      "main": [[{"node": "Send Stock Report", "type": "main", "index": 0}]]
    }
  }
}
